syntax = "proto3";

package querent.discovery;

// Start a discovery agent to query insights from data
// The agent will respond with insights discovered based on the user's query
// The agent use vector and graph embeddings to discover insights from data
message DiscoverySessionRequest {
  // Name of the discovery agent
  string agent_name = 1;
  // Semantic pipeline ID
  string semantic_pipeline_id = 2;
  // Discovery Session Type
  DiscoveryAgentType session_type = 3;
}

// Enum for DiscoverySessionType, either Retriever or Traverser
message DiscoveryAgentType {
  string session_type = 1;
}


// Session AgentID as a response
message DiscoverySessionResponse {
  // The ID of the discovery session
  string session_id = 1;
}

// Request message for querying insights from data
message DiscoveryRequest {
  // The ID of the discovery session
  string session_id = 1;
  // The query or question posed by the user
  string query = 2;
}

// Response message containing insights discovered from the data
message DiscoveryResponse {
  // The ID of the discovery session
  string session_id = 1;
  // Query or question posed by the user
  string query = 2;
  // The insights discovered based on the user's query
  repeated Insight insights = 3;
}

// Request to stop the discovery session
message StopDiscoverySessionRequest {
  // The ID of the discovery session
  string session_id = 1;
}

// Response to stop the discovery session
message StopDiscoverySessionResponse {
  // The ID of the discovery session
  string session_id = 1;
}

// Represents an insight discovered from the data
message Insight {
  // The document id of the search result
  string document = 1;
   // The document source
  string source = 2;
   // The attention score retrieved from the search result
  string relationship_strength = 3;
   // The sentence retrieved from the search resulty
  string sentence = 4;
   // The tags of the search result, comma separated subject, object , predicate
  string tags = 5;
}

message DiscoverySessionRequestInfo{
  string session_id = 1;
  DiscoverySessionRequest request = 2;
}

message DiscoverySessionRequestInfoList{
  repeated DiscoverySessionRequestInfo requests = 1;
}

message Empty {}

message DiscoveryQueryInput {
  int32 max_suggestions = 1;
}

message QuerySuggestion {
  string query = 1;
  int64 frequency = 2;
}

message DiscoveryQueryOutput {
  repeated QuerySuggestion suggestions = 1;
}

// The Discovery service provides a method to query insights from data
service Discovery {
  // Start a discovery session to query insights from data
  rpc StartDiscoverySession(DiscoverySessionRequest) returns (DiscoverySessionResponse) {}
  
  // Query insights from data
  rpc DiscoverInsights(DiscoveryRequest) returns (DiscoveryResponse) {}

  // Stop the discovery session
  rpc StopDiscoverySession(StopDiscoverySessionRequest) returns (StopDiscoverySessionResponse) {}

  // List all discovery sessions
  rpc ListDiscoverySessions(Empty) returns (DiscoverySessionRequestInfoList) {}

  // Autogenerate discovery queries
  rpc AutogenerateDiscoveryQueries(DiscoveryQueryInput) returns (DiscoveryQueryOutput) {}
}
